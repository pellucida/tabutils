
To Build
	make WORK=/tmp/build 

for swtp tabset version
	make -f Makefile-swtp WORK=/tmp/build

The work directory $(WORK) will default to ./work or ./work-swtp


Contents

Supporting Code

[vec]
A simple generic vector (array) library under src/vec

	_append (vec, x);
	_insert (vec, size_t i, x);
	_put (vec, size_t i, x);
	_replace (vec, size_t i, x);
	_clear (vec, size_t i);
	_remove (vec, size_t i);
	_get (vec, size_t i, x*);
	_used (vec);
	_size (vec);

that attempts to pick up most common mistakes.

[tabset-swtp]

The original implementation lifted from Software Tools in Pascal (swtp)
Any enumerated list of tab stops are stored as differences from the
previous tab stop in an instance of the vec abstraction while
repeated tabstop are stored as the repeat value.
This is encapsulated in src/tabset-swtp
 
	_next (tabset, current_position);
	_Make (&tabset, enumerated_stops, repeated_stops);
Defects:
	stops have to be separated by < MAXSIZE(delta_t) [255]
	the size of the array storing the shifts <= MAXSIZE(delta_t)*No.of.stops

[tabset]
This implemention stores the actual tab stops sequentially in the array.
The stops can be any value < MAXSIZE(pos_t) [64k]
and the array is only as large as the No.of.stops

	_next (tabset, current_position);
	_Make (&tabset, enumerated_stops, repeated_stops);

Compiling with -DVEC_DIRECT will inline vec_get accesses
and adding -DVEC_UNSAFE will not check bounds.

Defects:
	_next is basically built on a binary search on a vec instance
	which is trading space (and simplicity) for CPU (and complexit.)
	Special casing common condition means the search is rarely invoked.
	
[errors]
Error reporting and processing is combined in a few routines
under src/errors/

	typedef	result_t;
	char*	errors_strerror (result_t result);
	char*	errors_facility (result_t result);
	void	fatal (char* fmt, ...);
	void	errors_fatal (result_t result, char* fmt, ...);
	char*	errors_facility_name (result_t result);

[bitfields]
A few macros and simple functions are provided under src/bitfield
which packs and unpacks bit fields in hopefully portable manner,

[utils]
src/utils simple routines that most systems already have, and

[mem]
src/mem a few memory macros to avert some simple typo sort of 
allocation errors.

Application 

[tabutils]
The two executables detab and entab are found under src/tabutils
