.TH errors "3" "December 2023" "Programming" "Error Functions"
.SH NAME
result_t, errors_strerror, fatal, errors_fatal, errors_facility_name
.SH SYNOPSIS
.nf
.B # include	"errors/errors.h"
.PP
.BI "typedef	uint32_t	"result_t;
// uint32_t err:1,reserved:7,facility:8,errno:16
.PP
.BI "result_t	"ERRORS_ENCODE( "facility,errcode)
.PP
.BI "unsigned	"ERRORS_ERR( "result)
.PP
.BI "unsigned	"ERRORS_FACILITY( "result)
.PP
.BI "unsigned	"ERRORS_ERRNO( "result)
.PP
.BI "char*	errors_strerror (result_t " result)
.PP
.BI "void	fatal (char* " fmt, ...)
.PP
.BI "void	errors_fatal (result_t " result ", char* " fmt, ...)
.PP
.BI "char*	errors_facility_name (result_t " result)

.SH DESCRIPTION
.nf
.PP
A few routine for encoding and decoding error returns in a single
32 bit unsigned integer.  Each library or application can augment
the system errno returns by defining a new facility.
.PP
The \fBERRORS_*\fR macros do the encoding and encoding with bit shift
and masks (not bitfields.)
.PP
The error message corresponding to the facility and error code is
returned by \fBerrors_strerror()\fR.  To emit a formatted error message
\fBerrors_fatal\fR will expand any \fB%m\fR in \fIfmt\fR with the error message
returned by \fBerrors_strerror()\fR.
.PP
Client facilities provide <\fIfacility\fR>_\fBstrerror\fR (\fBint\fR errno) and
<\fIfacility\fR>_\fBfacility\fR (\fBvoid\fR) functions whose addresses are compiled
into \fIerrors/errors.c\fR
.SH EXAMPLE
.nf
\fBresult_t\fR	result	= \fBERRORS_ENCODE\fR (\fIERRORS_FACILITY_GLIBC\fR, \fIENOMEM\fR);
...
\fBerrors_fatal\fR (\fIresult\fR, "creating object [%m]");
ERROR: {glibc} progname: creating object [Cannot allocate memory]
.SH BUGS
Many I suspect.
